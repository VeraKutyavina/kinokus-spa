{
  "env": {
    "browser": true
  },
  "extends": [
    "airbnb",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "globals": {
    "document": true,
    "localStorage": true,
    "window": true,
    "navigator": true,
    "fetch": true
  },
  "plugins": ["@typescript-eslint/eslint-plugin", "prettier", "simple-import-sort"],
  "rules": {
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".js", ".jsx", ".tsx", ".ts"]
      }
    ],
    "prettier/prettier": "error",
    "react/jsx-one-expression-per-line": "off",
    "react/jsx-props-no-spreading": "off",
    "react/prop-types": 0,
    "react/no-array-index-key": 0,
    "react/no-did-update-set-state": "off",
    "react/require-default-props": "off",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "global-require": "warn",
    "no-underscore-dangle": [
      2,
      {
        "allow": ["__STORE__"]
      }
    ],
    "jsx-a11y/label-has-for": [
      1,
      {
        "components": ["Label"],
        "required": {
          "some": ["nesting", "id"]
        },
        "allowChildren": false
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": "arrow-function"
      }
    ],
    "jsx-a11y/media-has-caption": 1,
    "jsx-a11y/anchor-is-valid": 0,
    "arrow-body-style": 0,
    "max-len": 0,
    "camelcase": "off",
    "no-console": "warn",
    "no-unused-expressions": "off",
    "no-nested-ternary": "off",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "no-restricted-exports": [
      "error",
      {
        "restrictedNamedExports": ["then"]
      }
    ],
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": ["error"],
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/ban-ts-comment": 0,
    "@typescript-eslint/no-empty-function": 0,
    "import/prefer-default-export": 0,
    "import/no-extraneous-dependencies": 0,
    "import/extensions": [
      "error",
      {
        "ts": "never",
        "tsx": "never",
        "js": "never",
        "jsx": "never"
      }
    ]
  },
  "overrides": [
    {
      "files": ["**/*.js", "**/*.ts", "**/*.tsx"],
      "rules": {
        "simple-import-sort/imports": [
          "error",
          {
            "groups": [
              // `react` first, `next` second, then packages starting with a character
              ["^react$", "^next", "^formik", "^styled-components", "^[a-z]", "^@"],
              // HOK's
              ["^lib/"],
              // API queries
              ["^api/"],
              // store
              ["^store/"],
              // Constants
              ["^public/", "^helpers"],
              // SRC
              [
                "^src/shared/config",
                "^src/shared/context",
                "^src/shared/hooks",
                "^src/shared/types",
                "^src/shared/helpers",
                "^pages/"
              ],
              // Shared components
              [
                "^src/shared/ui/atoms/",
                "^src/shared/ui/molecules/",
                "^src/shared/ui/organisms/",
                "^src/shared/ui/templates/",

                "^pages/"
              ],
              ["^components/pages/"],
              // Imports starting with `../`
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Page components
              ["^./components"],
              // Imports starting with `./`
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              ["^./styled", "^./types", "^./config", "^./helpers", "^./utils", "^./constants", "^./fields"]
            ]
          }
        ]
      }
    },
    {
      "files": ["store/**/*.ts"],
      // avoid state param assignment
      "rules": { "no-param-reassign": ["error", { "props": false }] }
    }
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "paths": ["./"],
        "extensions": [".js", ".jsx", ".ts", ".tsx", ".d.ts", ".mjs"]
      }
    }
  }
}
